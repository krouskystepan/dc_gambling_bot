import type { CommandData, SlashCommandProps, CommandOptions } from 'commandkit'
import { ApplicationCommandOptionType, MessageFlags } from 'discord.js'
import { createBetEmbed } from '../../../utils/createEmbed'
import { DICE_WIN_MULTIPLIER } from '../../../utils/multiplayers'
import {
  checkChannelConfiguration,
  parseReadableStringToNumber,
  formatNumberToReadableString,
  checkUserRegistration,
} from '../../../utils/utils'

export const data: CommandData = {
  name: 'dice',
  description: 'Zahraj si kostku se 6 stranami.',
  options: [
    {
      name: 'bet',
      description: 'Vlo≈æ s√°zku (p≈ôedvolenou nebo nap≈ô. 2k, 4.5k).',
      type: ApplicationCommandOptionType.String,
      required: true,
    },
    {
      name: 'side',
      description: 'Zvol stranu kostky (1‚Äì6).',
      type: ApplicationCommandOptionType.Integer,
      required: true,
      choices: Array.from({ length: 6 }, (_, i) => ({
        name: (i + 1).toString(),
        value: i + 1,
      })),
    },
  ],
  contexts: [0],
}

export const options: CommandOptions = {
  deleted: false,
}

export async function run({ interaction }: SlashCommandProps) {
  try {
    const user = await checkUserRegistration(interaction.user.id)

    if (!user) {
      return interaction.editReply(
        'Nem√°≈° √∫ƒçet. Pro vytvo≈ôen√≠ √∫ƒçtu napi≈° `/register`.'
      )
    }

    const configReply = await checkChannelConfiguration(
      interaction,
      'casinoChannelIds',
      {
        notSet:
          'Tento server nebyl je≈°tƒõ nastaven pro pou≈æ√≠v√°n√≠ s√°zkov√Ωch p≈ô√≠kaz≈Ø. Nastav ho pomoc√≠ `/setup-casino`.',
        notAllowed: `Tento kan√°l nen√≠ nastaven pro pou≈æ√≠v√°n√≠ s√°zkov√Ωch p≈ô√≠kaz≈Ø. Zkuste jeden z tƒõchto kan√°l≈Ø:`,
      }
    )

    if (configReply) return

    const side = interaction.options.getInteger('side', true)

    const betAmount = interaction.options.getString('bet', true)
    const parsedBetAmount = parseReadableStringToNumber(betAmount)

    if (isNaN(parsedBetAmount)) {
      return interaction.reply({
        embeds: [
          createBetEmbed(
            '‚ùå Neplatn√° ƒç√°stka',
            'Red',
            'S√°zka mus√≠ b√Ωt re√°ln√© ƒç√≠slo.'
          ),
        ],
        flags: MessageFlags.Ephemeral,
      })
    }

    if (parsedBetAmount < 1) {
      return interaction.reply({
        embeds: [
          createBetEmbed(
            '‚ùå Neplatn√° s√°zka',
            'Red',
            'S√°zka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.'
          ),
        ],
        flags: MessageFlags.Ephemeral,
      })
    }

    if (side < 1 || side > 6) {
      return interaction.reply({
        embeds: [
          createBetEmbed(
            '‚ùå Neplatn√° strana',
            'Red',
            'Strana kostky mus√≠ b√Ωt mezi 1 a 6.'
          ),
        ],
        flags: MessageFlags.Ephemeral,
      })
    }

    if (!user) {
      return interaction.reply({
        embeds: [
          createBetEmbed(
            '‚ùå U≈æivatel nenalezen',
            'Red',
            'U≈æivatel nebyl nalezen.'
          ),
        ],
        flags: MessageFlags.Ephemeral,
      })
    }

    if (user.balance < parsedBetAmount) {
      return interaction.reply({
        embeds: [
          createBetEmbed(
            '‚ùå Nedostatek penƒõz',
            'Red',
            'Nem√°≈° dostatek penƒõz na s√°zku.'
          ),
        ],
        flags: MessageFlags.Ephemeral,
      })
    }

    const dice = Math.floor(Math.random() * 6) + 1

    if (dice === side) {
      const winnings = Math.floor(parsedBetAmount * DICE_WIN_MULTIPLIER)
      user.balance += winnings
      await user.save()

      return interaction.reply({
        embeds: [
          createBetEmbed(
            'üéâ V√Ωhra!',
            'Green',
            `üé≤ Padlo **${dice}**!\nVyhr√°l jsi **$${formatNumberToReadableString(
              winnings
            )}**! üí∞`
          ),
        ],
      })
    } else {
      user.balance -= parsedBetAmount
      await user.save()

      return interaction.reply({
        embeds: [
          createBetEmbed(
            'üò¢ Prohra',
            'Red',
            `üé≤ Padlo **${dice}**.\nZtratil jsi **$${betAmount}**. Zkus to znovu!`
          ),
        ],
      })
    }
  } catch (error) {
    console.error('Error running the command:', error)
    return interaction.reply({
      embeds: [
        createBetEmbed(
          '‚ùå Chyba',
          'Red',
          'P≈ôi zpracov√°n√≠ p≈ô√≠kazu do≈°lo k chybƒõ.'
        ),
      ],
      flags: MessageFlags.Ephemeral,
    })
  }
}
