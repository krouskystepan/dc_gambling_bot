import { CommandData, CommandOptions, SlashCommandProps } from 'commandkit'
import { ApplicationCommandOptionType, MessageFlags } from 'discord.js'
import User from '../../../models/User'
import { createBetEmbed } from '../../../utils/createEmbed'
import { spinSlot, calculateWinnings } from '../../../utils/slotsHelpers'
import {
  checkChannelConfiguration,
  parseReadableStringToNumber,
  formatNumberToReadableString,
} from '../../../utils/utils'

export const data: CommandData = {
  name: 'slots',
  description: 'Zatoƒç si na slot machine a vyhraj!',
  options: [
    {
      name: 'bet',
      description: 'Vlo≈æ s√°zku (nap≈ô. 2k, 4.5k).',
      type: ApplicationCommandOptionType.String,
      required: true,
    },
    {
      name: 'spins',
      description: 'Poƒçet spin≈Ø (v√Ωchoz√≠: 1, max: 20).',
      type: ApplicationCommandOptionType.Integer,
      required: false,
    },
  ],
  contexts: [0],
}

export const options: CommandOptions = {
  deleted: false,
}

export async function run({ interaction }: SlashCommandProps) {
  try {
    const configReply = await checkChannelConfiguration(
      interaction,
      'casinoChannelIds',
      {
        notSet:
          'Tento server nebyl je≈°tƒõ nastaven pro pou≈æ√≠v√°n√≠ s√°zkov√Ωch p≈ô√≠kaz≈Ø. Nastav ho pomoc√≠ `/setup-casino`.',
        notAllowed: `Tento kan√°l nen√≠ nastaven pro pou≈æ√≠v√°n√≠ s√°zkov√Ωch p≈ô√≠kaz≈Ø. Zkus jin√Ω.`,
      }
    )

    if (configReply) return

    const bet = parseReadableStringToNumber(
      interaction.options.getString('bet', true)
    )
    const spins = interaction.options.getInteger('spins') || 1

    if (bet < 1) {
      return interaction.reply({
        embeds: [
          createBetEmbed(
            '‚ùå Neplatn√° s√°zka',
            'Red',
            'S√°zka mus√≠ b√Ωt vƒõt≈°√≠ ne≈æ 0.'
          ),
        ],
        flags: MessageFlags.Ephemeral,
      })
    }

    if (spins < 1 || spins > 20) {
      return interaction.reply({
        embeds: [
          createBetEmbed(
            '‚ùå Neplatn√Ω poƒçet spin≈Ø',
            'Red',
            'Poƒçet otoƒçek mus√≠ b√Ωt mezi 1 a 20.'
          ),
        ],
        flags: MessageFlags.Ephemeral,
      })
    }

    const user = await User.findOne({ userId: interaction.user.id })

    if (!user) {
      return interaction.reply({
        embeds: [
          createBetEmbed(
            '‚ùå U≈æivatel nenalezen',
            'Red',
            'U≈æivatel nebyl nalezen.'
          ),
        ],
        flags: MessageFlags.Ephemeral,
      })
    }

    const totalBet = bet * spins
    if (user.balance < totalBet) {
      return interaction.reply({
        embeds: [
          createBetEmbed(
            '‚ùå Nedostatek penƒõz',
            'Red',
            `Nem√°≈° dostatek penƒõz na ${spins} spin≈Ø (pot≈ôebuje≈° **$${formatNumberToReadableString(
              totalBet
            )}**).`
          ),
        ],
        flags: MessageFlags.Ephemeral,
      })
    }

    let totalWinnings = 0
    let results: string[] = []

    for (let i = 0; i < spins; i++) {
      const resultString = spinSlot()
      const winnings = calculateWinnings(resultString, bet)
      const isWin = winnings > 0

      results.push(
        `**${resultString}** | ${isWin ? 'üéâ' : '‚ùå'} | ${
          isWin
            ? `**+$${formatNumberToReadableString(winnings)}**`
            : `**-$${formatNumberToReadableString(bet)}**`
        }`
      )

      totalWinnings += winnings - bet
    }

    user.balance += totalWinnings
    await user.save()

    const isWin = totalWinnings > 0
    const isLoss = totalWinnings < 0

    return interaction.reply({
      embeds: [
        createBetEmbed(
          isWin
            ? 'üé∞ **V√Ωhra!** üéâ'
            : isLoss
            ? 'üé∞ **Sm≈Øla...** ‚ùå'
            : 'üé∞ **Nic moc...** üëÄ',
          isWin ? 'Green' : isLoss ? 'Red' : 'Yellow',
          `üïπ **V√Ωsledky spin≈Ø:**\n${results.join('\n')}\n\n` +
            `üí∞ **Celkov√Ω v√Ωsledek:** ${
              isWin ? 'üü¢' : isLoss ? 'üî¥' : 'üü°'
            } **$${formatNumberToReadableString(totalWinnings)}**\n`
        ),
      ],
    })
  } catch (error) {
    console.error('Error running the command:', error)
    return interaction.reply({
      embeds: [
        createBetEmbed(
          '‚ùå Chyba',
          'Red',
          'P≈ôi zpracov√°n√≠ p≈ô√≠kazu do≈°lo k chybƒõ.'
        ),
      ],
      flags: MessageFlags.Ephemeral,
    })
  }
}
